---
job: "ucc"

step_allow_single_selector: true

registry_host: "harbor.mellanox.com"
registry_path: "/torch-ucc"
registry_auth: "05d98651-e11c-4a57-9cc6-52df79014b89"

volumes:
  - { mountPath: "/hpc/local", hostPath: "/hpc/local" }
  - { mountPath: "/auto/sw_tools", hostPath: "/auto/sw_tools" }
  - {
      mountPath: "/.autodirect/mtrswgwork",
      hostPath: "/.autodirect/mtrswgwork",
    }
  - {
      mountPath: "/.autodirect/sw/release",
      hostPath: "/.autodirect/sw/release",
    }

env:
  CUDA_VER: '12.1.1'
  UCC_URI_SUFFIX: "ucc/${UCC_VERSION}/x86_64/centos8/cuda${CUDA_VER}"
  UCC_DOCKER_IMAGE_NAME: "${registry_host}${registry_path}/${UCC_URI_SUFFIX}"
  NVIDIA_ROOT_DIR: "/opt/nvidia"
  SRC_DIR: "${NVIDIA_ROOT_DIR}/src"
  BIN_DIR: "${NVIDIA_ROOT_DIR}/bin"
  DOCKER_OPT: "--pull always --network=host --uts=host --ipc=host --ulimit stack=67108864 --ulimit memlock=-1 --security-opt seccomp=unconfined --cap-add=SYS_ADMIN --device=/dev/infiniband/ --gpus all"

docker_opt: "$DOCKER_OPT"

kubernetes:
  cloud: "swx-k8s"

credentials:
  - {
      credentialsId: "bc9a18d3-1153-449c-b924-7fc9249c9cc0",
      usernameVariable: "UCC_USERNAME",
      passwordVariable: "UCC_PASSWORD",
    }

runs_on_dockers:
  - {
      file: ".ci/Dockerfile.ngc_pytorch",
      name: "ngc_pytorch",
      tag: "${BUILD_NUMBER}",
      arch: "x86_64",
      uri: "${UCC_URI_SUFFIX}",
      build_args: "--rm --no-cache --build-arg CUDA_VER=${CUDA_VER} --build-arg NVIDIA_ROOT_DIR=${NVIDIA_ROOT_DIR}",
      cloud: "swx-k8s",
    }

# bare metal
runs_on_agents:
  - nodeLabel: "swx-clx01"
  - nodeLabel: "ml-test-node-gpu"

timeout_minutes: 360

steps:
  #============================================================================
  - name: Start docker
    agentSelector: "{nodeLabel: 'swx-clx01'}"
    #containerSelector: "{name:'skip-container'}"
    run: |
      echo "INFO: Start docker containers"
      DOCKER_IMAGE_NAME="${UCC_DOCKER_IMAGE_NAME}:${BUILD_ID}"
      docker pull ${DOCKER_IMAGE_NAME}
      docker create -ti --rm $DOCKER_OPT ${DOCKER_IMAGE_NAME} /bin/bash > /tmp/ucc_docker-"${BUILD_TAG}".id
      docker start $(cat /tmp/ucc_docker-"${BUILD_TAG}".id)
  #============================================================================
  - name: Run Coverity
    credentialsId: "bc9a18d3-1153-449c-b924-7fc9249c9cc0"
    agentSelector: "{nodeLabel: 'ml-test-node-gpu'}"
    run: |
      export UCC_PASSWORD=$UCC_PASSWORD
      export UCC_USERNAME=$UCC_USERNAME
      echo "Running coverity"
      ${WORKSPACE}/.ci/scripts/coverity.sh
    archiveArtifacts: .ci/scripts/cov-build/*
  #============================================================================
  - name: Run UCC / Torch-UCC tests
    agentSelector: "{nodeLabel: 'swx-clx01'}"
    run: |
      echo "INFO: Run UCC tests"
      hostname
      docker exec $(cat /tmp/ucc_docker-"${BUILD_TAG}".id) bash -c "\${SRC_DIR}/ucc/.ci/scripts/run_tests_ucc.sh"
    always: |
      docker rm --force $(cat /tmp/ucc_docker-"${BUILD_TAG}".id)
  #============================================================================
  - name: Run docker containers
    agentSelector: "{nodeLabel: 'swx-clx01'}"
    #containerSelector: "{name:'skip-container'}"
    run: |
      echo "INFO: Run docker containers"
      ${WORKSPACE}/.ci/scripts/run_docker.sh
  #============================================================================
  - name: Run UCC MPI tests
    agentSelector: "{nodeLabel: 'swx-clx01'}"
    run: |
      echo "INFO: Run UCC MPI tests"
      [ "$UCC_MPI_TESTS" = "true" ] && ${WORKSPACE}/.ci/scripts/run_tests_ucc_mpi_docker.sh || echo "Tests skipped by defaul while will be fixed !!!"
  #============================================================================
  - name: Run DLRM tests (UCC/GPU)
    agentSelector: "{nodeLabel: 'swx-clx01'}"
    run: |
      echo "INFO: Run DLRM tests (UCC/GPU)"
      ${WORKSPACE}/.ci/scripts/run_dlrm_docker.sh
  #============================================================================
  - name: Stop docker containers
    agentSelector: "{nodeLabel: 'swx-clx01'}"
    run: |
      echo "INFO: Stop docker containers"
      ${WORKSPACE}/.ci/scripts/stop_docker.sh
  #============================================================================
