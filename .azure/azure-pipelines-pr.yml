# See https://aka.ms/yaml
# This pipeline to be run on PRs

trigger: none
pr:
  branches:
    include:
    - master
    - v*.*.x
  paths:
    exclude:
    - .gitignore
    - .readthedocs.yaml
    - contrib/pr_merge_check.py
    - docs/source
    - docs/CodeStyle.md
    - docs/LoggingStyle.md
    - docs/OptimizationStyle.md
    - README.md
    - NEWS
    - AUTHORS

resources:
  containers:
    - container: fedora
      image: rdmz-harbor.rdmz.labs.mlnx/ucx/fedora33:1

stages:
  - stage: Codestyle
    jobs:
     # Check that the code is formatted according to the code style guidelines
      - job: format
        displayName: format code
        pool:
          name: MLNX
          demands:
          - ucx_docker -equals yes
        container: fedora
        steps:
          - checkout: self
            clean: true
            fetchDepth: 100

          - bash: |
              set -x
              git log -1 HEAD
              git log -1 HEAD^
              BASE_SOURCEVERSION=$(git rev-parse HEAD^)
              echo "Checking code format on diff ${BASE_SOURCEVERSION}..${BUILD_SOURCEVERSION}"
              git-clang-format --diff ${BASE_SOURCEVERSION} ${BUILD_SOURCEVERSION} > format.patch
              echo "Generated patch file:"
              cat format.patch
              if [ "`cat format.patch`" = "no modified files to format" ]; then
                  exit
              fi
              git apply format.patch
              if ! git diff --quiet --exit-code
              then
                  url="https://github.com/openucx/ucx/wiki/Code-style-checking"
                  echo "##vso[task.complete result=SucceededWithIssues;]DONE'Code is not formatted according to the code style, see $url for more info.'"
                  echo "##vso[task.logissue type=warning]'Code is not formatted'"
              fi

  - stage: Test
    jobs:
      - job: Gtest
        timeoutInMinutes: 120
        workspace:
          clean: all
        pool:
          name: MLNX
          demands:
          - ucx_bf -equals yes
        steps:
          - checkout: self

          - bash: |
              set -eE
              git clone --depth 1 -b master https://github.com/openucx/ucx.git ucx
              cd ucx
              ./autogen.sh
              mkdir -p ucx_build_dir
              cd ucx_build_dir
              ../configure --without-java --prefix=$(Build.Repository.LocalPath)/install_ucx
              gcc -v
              make -s -j `nproc`
              make install
            displayName: Build ucx artifact
            timeoutInMinutes: 40
          - bash: |
              set -xEe
              ./autogen.sh
              mkdir -p build
              cd build
              ../configure --with-ucx=$(Build.Repository.LocalPath)/install_ucx \
                            --prefix=$(Build.Repository.LocalPath)/install --enable-gtest
              make -j install
            displayName: Build ucc artifact
            timeoutInMinutes: 60
          - bash: |
              cd build
              make gtest
            displayName: Launch Gtest
            timeoutInMinutes: 120
